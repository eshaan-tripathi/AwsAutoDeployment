name: Deploy AWS Lambda

on:
  push:
    branches: ["main"]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # 3Ô∏è‚É£ Install Dependencies if Lambda exists
      - name: Install Dependencies
        if: hashFiles('lambda/package.json') != ''
        run: |
          cd lambda
          npm install

      - name: Lambda Syntax Check
        id: syntax_check
        continue-on-error: false
        run: |
          cd lambda
          npm install eslint --no-save
          npx eslint . --ext .js

      # 4Ô∏è‚É£ Run Lambda Tests
      - name: Run Lambda Tests
        id: run_tests
        if: hashFiles('lambda/tests/**') != ''
        continue-on-error: true
        run: |
          set -e
          node lambda/tests/test_lambda.js

      # 5Ô∏è‚É£ Detect Changed Services
      - name: Detect Changed Services
        id: detect
        run: |
          echo "services=[]" >> $GITHUB_ENV
          if git rev-parse HEAD~1 >/dev/null 2>&1; then
            changed_files=$(git diff --name-only HEAD~1 HEAD)
          else
            echo "No previous commit found (first push). Considering all services."
            changed_files=$(find lambda -type f)
          fi

          services=()
          if echo "$changed_files" | grep -q "lambda/"; then
            services+=("lambda")
          fi

          echo "services=${services[*]}" >> $GITHUB_ENV
          echo "Detected services: ${services[*]}"

      # 6Ô∏è‚É£ Zip Lambda code
      - name: Zip Lambda code
        if: contains(env.services, 'lambda')
        run: |
          cd lambda
          zip -r ../lambda_deploy.zip . -x "tests/*" "node_modules/*"

      # 7Ô∏è‚É£ Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.0

      # 8Ô∏è‚É£ Ensure Terraform Backend S3 Bucket Exists
      - name: Ensure Terraform Backend
        run: |
          if aws s3 ls "s3://esh-terra" 2>&1 | grep -q 'NoSuchBucket'; then
            echo "ü™£ Creating Terraform state bucket..."
            aws s3api create-bucket \
              --bucket esh-terra \
              --region us-east-1 \
              --create-bucket-configuration LocationConstraint=us-east-1
          else
            echo "‚úÖ Backend bucket already exists"
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1

      # 9Ô∏è‚É£ Terraform Init
      - name: Terraform Init
        working-directory: terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
        run: terraform init -reconfigure -input=false

      # üîü Import existing Lambda if it exists
      - name: Import existing Lambda
        working-directory: terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
        run: |
          set -e
          FUNCTION_NAME="demo_service"
          if aws lambda get-function --function-name "$FUNCTION_NAME" >/dev/null 2>&1; then
            echo "üü¢ Lambda '$FUNCTION_NAME' exists ‚Äî importing into Terraform state..."
            terraform init -reconfigure -input=false
            if terraform state list | grep -q "aws_lambda_function.demo_lambda"; then
              echo "üîπ Already imported into Terraform state."
            else
              terraform import \
                -var="region=us-east-1" \
                -var="lambda_zip=../lambda_deploy.zip" \
                -var="lambda_handler=index.handler" \
                -var="lambda_runtime=nodejs18.x" \
                -var="lambda_role=${{ secrets.LAMBDA_ROLE_ARN }}" \
                aws_lambda_function.demo_lambda "$FUNCTION_NAME"
            fi
          else
            echo "üÜï Lambda '$FUNCTION_NAME' does not exist ‚Äî will be created by Terraform."
          fi

      # 1Ô∏è‚É£1Ô∏è‚É£ Capture current Lambda alias version (for rollback)
      - name: Capture current Lambda alias version
        id: capture_version
        run: |
          FUNCTION_NAME="demo_service"
          ALIAS_NAME="prod"

          if aws lambda get-alias --function-name "$FUNCTION_NAME" --name "$ALIAS_NAME" >/dev/null 2>&1; then
            CURRENT_VERSION=$(aws lambda get-alias --function-name "$FUNCTION_NAME" --name "$ALIAS_NAME" --query 'FunctionVersion' --output text)
            echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
            echo "Alias exists. Current version: $CURRENT_VERSION"
          else
            echo "Alias does not exist yet. No rollback possible."
            echo "CURRENT_VERSION=" >> $GITHUB_ENV
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1

      # 1Ô∏è‚É£2Ô∏è‚É£ Terraform Apply (Lambda Only)
      - name: Terraform Apply (Lambda Only)
        id: apply
        working-directory: terraform
        continue-on-error: true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
        run: |
          set -e
          terraform apply -auto-approve \
            -var="region=us-east-1" \
            -var="lambda_zip=../lambda_deploy.zip" \
            -var="lambda_handler=index.handler" \
            -var="lambda_runtime=nodejs18.x" \
            -var="lambda_role=${{ secrets.LAMBDA_ROLE_ARN }}" \
            -input=false

      # 1Ô∏è‚É£3Ô∏è‚É£ Rollback Lambda alias if apply fails
      - name: Rollback Lambda alias if apply fails
        if: failure()
        run: |
          if [ -n "$CURRENT_VERSION" ]; then
            echo "Terraform apply failed. Rolling back Lambda alias..."
            aws lambda update-alias \
              --function-name demo_service \
              --name prod \
              --function-version "$CURRENT_VERSION"
          else
            echo "No previous alias version found. Skipping rollback."
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1

      # 1Ô∏è‚É£4Ô∏è‚É£ SNS Notification with Logs
      - name: SNS Notification with Logs
        if: always()
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
          SNS_TOPIC_ARN: arn:aws:sns:us-east-1:612572392212:LambdaDeployNotifications-e
        run: |
          LOGS=$(tail -n 100 $GITHUB_WORKSPACE/_temp/_runner_file_commands/set_env_* 2>/dev/null || echo "No logs available")

          if [ "${{ job.status }}" == "success" ] && [ "${{ steps.run_tests.outcome }}" == "success" ]; then
            MESSAGE="‚úÖ Lambda deployment pipeline succeeded! Branch: ${{ github.ref }}, Commit: ${{ github.sha }}"
          else
            MESSAGE="‚ùå Lambda deployment pipeline failed! Branch: ${{ github.ref }}, Commit: ${{ github.sha }}\n\nLast 100 lines of logs:\n$LOGS"
          fi

          aws sns publish \
            --topic-arn "$SNS_TOPIC_ARN" \
            --message "$MESSAGE" \
            --region $AWS_DEFAULT_REGION
