name: Deploy Lambda

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        id: checkout
        uses: actions/checkout@v3

      - name: Install Dependencies
        id: install
        run: |
          cd lambda
          npm install

      - name: Lambda Syntax Check
        id: syntax_check
        run: |
          cd lambda
          npx eslint . --ext .js

      - name: Run Lambda Tests
        id: run_tests
        run: |
          cd lambda
          npm test

      - name: Zip Lambda Code (excluding node_modules)
        id: zip_lambda
        run: |
          cd lambda
          zip -r ../auto-deploy.zip . -x "node_modules/*"

      - name: Terraform Init
        id: tf_init
        run: |
          cd terraform
          terraform init

      - name: Terraform Validate
        id: tf_validate
        run: |
          cd terraform
          terraform validate

      - name: Terraform Apply (Lambda Only)
        id: tf_apply
        run: |
          cd terraform
          terraform apply -auto-approve

      # ✅ Build failure summary if any step fails
      - name: Build failure summary
        id: build_summary
        if: failure()
        run: |
          FAILURE_MESSAGE="❌ Lambda deployment pipeline failed at unknown step."

          if [ "${{ steps.syntax_check.outcome }}" == "failure" ]; then
            FAILURE_MESSAGE="❌ Failed during Lambda Syntax Check."
          elif [ "${{ steps.run_tests.outcome }}" == "failure" ]; then
            FAILURE_MESSAGE="❌ Failed during Lambda Tests."
          elif [ "${{ steps.zip_lambda.outcome }}" == "failure" ]; then
            FAILURE_MESSAGE="❌ Failed during Zipping Lambda Code."
          elif [ "${{ steps.tf_init.outcome }}" == "failure" ]; then
            FAILURE_MESSAGE="❌ Failed during Terraform Init."
          elif [ "${{ steps.tf_validate.outcome }}" == "failure" ]; then
            FAILURE_MESSAGE="❌ Failed during Terraform Validate."
          elif [ "${{ steps.tf_apply.outcome }}" == "failure" ]; then
            FAILURE_MESSAGE="❌ Failed during Terraform Apply."
          fi

          echo "FAILURE_MESSAGE=$FAILURE_MESSAGE" >> $GITHUB_ENV

      # ✅ Send SNS Notification
      - name: SNS Notification with Logs
        if: always()
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
          SNS_TOPIC_ARN: arn:aws:sns:us-east-1:612572392212:LambdaDeployNotifications-e
        run: |
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          if [ "${{ job.status }}" == "success" ]; then
            MESSAGE="✅ Lambda deployment succeeded!
Branch: ${{ github.ref }}
Commit: ${{ github.sha }}
Logs: $RUN_URL"
          else
            MESSAGE="${FAILURE_MESSAGE}
Branch: ${{ github.ref }}
Commit: ${{ github.sha }}
Logs: $RUN_URL"
          fi

          aws sns publish \
            --topic-arn "$SNS_TOPIC_ARN" \
            --message "$MESSAGE" \
            --region $AWS_DEFAULT_REGION
